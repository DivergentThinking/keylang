
var toplevel = 5 + 5;
var toplevel2 = toplevel + 5;
fn toplevel3() return 5;
var toplevel4 = toplevel2 + toplevel3();
if (toplevel4 != 20) debug("toplevel4 = ", toplevel4);

fn test_restargs()
{
  fn bar(a...) { debug("bar: ", a); }
  fn foo(a,b,c,d...) { debug("foo: ", a, b, c, d); }
  bar();
  bar(1);
  bar(1,2);
  bar(1,2,3);
  foo();
  foo(1);
  foo(1,2);
  foo(1,2,3);
  foo(1,2,3,4);
  foo(1,2,3,4,5);
  foo(1,2,3,4,5,6);
  foo(1,2,3,4,5,6,7);
  foo(1,2,3,4,5,6,7,8);
}

fn __array__(a,b,c,d,e,f) {
  debug("array: ", a, ":", b, ":", c, ":", d, ":", e, ":", f);
  return 9;
}
fn __object__(a,b,c,d,e,f) {
  debug("object: ", a, ":", b, ":", c, ":", d, ":", e, ":", f);
  return 9;
}
fn test_compound_literal()
{
  var array1 = [ 1, 2, 3, 4 ];
  var array2 = [ 1, 2, 3, 4, ];
  var array3 = [ ];
  var obj1 = { name1: 1, name2: 2 };
  var obj2 = { name1: 1, name2: 2, };
  var obj3 = { };
}

fn test_fn_nest()
{
  fn parse_me1() { return 5; }
  fn parse_me2() return 5;
  var x = parse_me1();
  if (x != 5) debug("fnexpr x = ", x);

  fn call_expr(fp) return fp(7);
  var z = fn (a) { return a + 2; };
  var y = call_expr( fn (a) return a + 2; );
  if (y != 9) debug("fnexpr y = ", y);
}

fn test_callback()
{
  ARRAY[0] = 5;
  ARRAY[1] = 2;
  ARRAY[2] = 6;
  ARRAY[3] = 3;
  ARRAY[4] = 0;
  ARRAY[5] = 1;
  ARRAY[6] = 4;
  fn cmp(a, b) { /* reverse sort */
    return a < b ? 1 : a > b ? -1 : 0;
  }
  ARRAY.sort(7, cmp);
  if (ARRAY[0] != 6) debug("sort0:", ARRAY[0]);
  if (ARRAY[1] != 5) debug("sort1:", ARRAY[1]);
  if (ARRAY[2] != 4) debug("sort2:", ARRAY[2]);
  if (ARRAY[3] != 3) debug("sort3:", ARRAY[3]);
  if (ARRAY[4] != 2) debug("sort4:", ARRAY[4]);
  if (ARRAY[5] != 1) debug("sort5:", ARRAY[5]);
  if (ARRAY[6] != 0) debug("sort6:", ARRAY[6]);
}

fn test_cond_prec()
{
  var a;
  var b;
  var c;
  a = 1 ? b=2 : c=3;
  if (a != 2 || ?c) debug("prec1:a=", a, " c=", c);

  a = undef; b = undef; c = undef;
  a = 1 ? b?0:2 : c=3;
  if (a != 2 || ?c) debug("prec2:a=", a, " c=", c);

  a = undef; b = undef; c = undef;
  a = 1 ? b?0:2 : c?0:3;
  if (a != 2) debug("prec3:a=", a);

  a = undef; b = undef; c = undef;
  a = 1 ? b = 2 ? 3 : 4 : c = 5 ? 6 : 7;
  if (a != 3 || b != 3 || ?c) debug("prec4:a=", a, " b=", b, " c=", c);

  a = undef; b = undef; c = undef;
  a = 0 ? b = 2 ? 3 : 4 : c = 5 ? 6 : 7;
  if (a != 6 || ?b || c != 6) debug("prec5:a=", a, " b=", b, " c=", c);

  a = undef; b = undef; c = undef;
  a = 0 ? b = 2 ? 3 : 4 : c = 0 ? 6 : 7 ? 8 : 9;
  if (a != 8 || ?b || c != 8) debug("prec5:a=", a, " b=", b, " c=", c);
}

fn test_fancy3(a) return a;
fn test_fancy2() return test_fancy3;
fn test_fancy()
{
  var i;
  i = test_fancy2()(5); if (i != 5) debug("fancy i!=5: ", i);
  i = (1 ? test_fancy3 : 0)(7); if (i != 7) debug("fancy i!=7: ", i);

/* should not work:
  i = "test_fancy3"(6); if (i != 6) debug("fancy i!=6: ", i);
  var n = "test_fancy3";
  i = (1?n:0)(8); if (i != 8) debug("fancy i!=8: ", i);
  i = n(9);   if (i != 9) debug("fancy i!=9: ", i);
*/
}

fn test_trace5() { trace(); debug("all good"); }
fn test_trace4() { test_trace5(); }
fn test_trace3() { var f = test_trace4; f(); }  // trace: f
fn test_trace2x() { return test_trace3; }
fn test_trace2() { test_trace2x()(); }  // trace: <unknown>
fn test_trace1() { test_trace2(); }
fn test_trace() { test_trace1(); }

fn test_empty() {}

fn test_cond()
{
  var a = 1 ? 2 : 3;
  var b = 1  ?  1 ? 3 : 4  :  5 ? 6 : 7;
  var c = 1  ?  0 ? 3 : 4  :  5 ? 6 : 7;
  var d = 0  ?  2 ? 3 : 4  :  1 ? 6 : 7;
  var e = 0  ?  2 ? 3 : 4  :  0 ? 6 : 7;

  if (a != 2) debug("cond a=", a);
  if (b != 3) debug("cond b=", b);
  if (c != 4) debug("cond c=", c);
  if (d != 6) debug("cond d=", d);
  if (e != 7) debug("cond e=", e);
}

fn test_coal()
{
  var a, b = 0, c = 1;
  var d = a ?? 5;
  var e = b ?? 5;
  var f = c ?? 5;
  if (d != 5) debug("coal d=", d);
  if (e == 5) debug("coal e=", e);
  if (f == 5) debug("coal f=", f);
  d = a && 5;
  e = b && 5;
  f = c && 5;
  if (d isnot "undef") debug("coal d2=", d);
  if (e != 0) debug("coal e2=", e);
  if (f != 5) debug("coal f2=", f);
  d = a || 5;
  e = b || 5;
  f = c || 5;
  if (d != 5) debug("coal d3=", d);
  if (e != 5) debug("coal e3=", e);
  if (f != 1) debug("coal f3=", f);
}

fn test_type()
{
  var a = 1;
  var b = "s";
  if (typeof a != "int") debug("typeof is not int:", typeof a);
  if (typeof b != "string") debug("typeof is not string:", typeof b);
  if (typeof test_type != "function") debug("typeof is not function:", typeof test_type);
  if (typeof debug != "native") debug("typeof is not native:", typeof debug);
  var c = a is "int";
  var d = b is "string";
  var e = test_type is "function";
  var f = debug is "native";
  if (!c) debug("c is not int:", typeof a);
  if (!d) debug("d is not string:", typeof b);
  if (!e) debug("e is not function:", typeof test_type);
  if (!f) debug("f is not native:", typeof debug);
}

gfn memberfunc(obj, a1, a2, a3, a4, a5)
{
  if (obj != ARRAY) debug("memberfunc A ", obj, ", ", ARRAY);
  if (a1 != "1") debug("memberfunc 1 ", a1);
  if (a2 != 2) debug("memberfunc 2 ", a2);
  if (a3 != 3) debug("memberfunc 3 ", a3);
  if (a4 != undef) debug("memberfunc 4 ", a4);
  if (a5 != undef) debug("memberfunc 5 ", a5);
}

fn test_member()
{
  ARRAY.a;
  ARRAY[0];
  ARRAY[1] = 4;
  ARRAY[2] = 3;
  ARRAY[3] = 5;
  if (ARRAY[1] != 4) debug("ARRAY[1]=", ARRAY[1]);
  if (ARRAY[2] != 3) debug("ARRAY[2]=", ARRAY[2]);
  if (ARRAY[3] != 5) debug("ARRAY[3]=", ARRAY[3]);
  ARRAY.a = 4;
  ARRAY.b = 3;
  ARRAY.c = 5;
  if (ARRAY.a != 4) debug("ARRAY.a=", ARRAY.a);
  if (ARRAY.b != 3) debug("ARRAY.b=", ARRAY.b);
  if (ARRAY.c != 5) debug("ARRAY.c=", ARRAY.c);
  ARRAY.memberfunc("1", 2, 3);
  ARRAY["memberfunc"]("1", 2, 3);
  var b;
  ARRAY.a += 4;
  if (ARRAY.a != 8) debug("1ARRAY.a=", ARRAY.a);
  b = ARRAY.a++;
  if (ARRAY.a != 9) debug("2ARRAY.a=", ARRAY.a);
  if (b != 8) debug("2b=", b);
  b = ++ARRAY.a;
  if (ARRAY.a != 10) debug("3ARRAY.a=", ARRAY.a);
  if (b != 10) debug("3b=", b);
}

fn test_pause()
{
  var a;
  a = pause(); if (a != 0) debug("a0=", a);
  a = pause(); if (a != 1) debug("a1=", a);
  a = pause(); if (a != 2) debug("a2=", a);
  a = pause(); if (a != 3) debug("a3=", a);
  a = pause(); if (a != 4) debug("a4=", a);
}

fn test_subneg()
{
  var a = - 3;
  var b = a - 2;
  if (a != -3 || b != -5) debug("subneg: -3, -5: ", a, " ", b);
}

fn test_def()
{
  var x, y = undef, z = 5;
  z = undef;
  if (?x) debug("?x: ", x);
  if (?y) debug("?y: ", y);
  if (?z) debug("?z: ", z);
}

fn test_loops()
{
  var j = 1;
  var i = 0;
  while (i < 3) { j += j; i += 1; }
  if (j != 8) debug("j != 8: ", j);

  i = 0;
  while (i < 5) { if (i == 2) break; i += 1; }
  if (i != 2) debug("i != 2: ", i);

  i = 0;
  j = 1;
  while (i < 10) {
    i += 1;
    if (i > 3) continue;
    j += j;
  }
  if (j != 8) debug("j != 8: ", j);
  if (i != 10) debug("i != 10: ", i);

  i = 0;
  do { i = 5; } while (0);
  if (i != 5) debug("do: i != 5: ", i);

  i = 0;
  do { i += 1; } while (i < 4);
  if (i != 4) debug("do: i != 4: ", i);

  var trace_for = 0;
  if (trace_for) debug("testing for");
  var g;
  for (g = 0; g < 10; g++) if (trace_for) debug("hello:", g);
  for (g = 0; g < 10; g++) { if (trace_for) debug("hello:", g); continue; }
  for (;;) {
    if (++g >= 20) break;
  }
  if (g != 20) debug("for: g != 20: ", g);
}

fn recurse(i)
{
  var x = i;
  if (x >= 10) return x;
  return recurse(x + 1);
}
fn test_nested_scope()
{
  var x = 4;
  var y = recurse(0);
  if (x != 4 || y != 10) debug("x=", x, ", y=", y);
}

gfn foo0(a,b) { var c = a + b; return c; }
fn foo1(a,b) { return a + b; }
fn foo2(a,b) { return a += b; }
var filescope = 17;
gvar globalscope = 23;
fn test_scope()
{
  var w = foo0(filescope, globalscope);
  var x = foo1(filescope, globalscope);
  var y = foo2(filescope, globalscope);
  if (w != 40) debug('w=', w);
  if (x != 40) debug('x=', x);
  if (y != 40) debug('y=', y);
}

fn main() {
  debug("testing ", 5, 23, " and more testing ", undef, ".");
  test_scope();
  test_nested_scope();
  test_loops();
  test_def();
  test_subneg();
  test_pause();
  test_member();
  test_type();
  test_coal();
  test_cond();
  test_empty();
  test_trace();
  test_fancy();
  test_cond_prec();
  test_callback();
  test_fn_nest();
//  test_restargs();
//  test_compound_literal();
  return "a happy \\ little string";
}
